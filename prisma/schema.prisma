generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  clerk_id      String         @unique
  first_name    String
  last_name     String
  username      String         @unique
  email         String         @unique
  profile_pict  String
  bio           String?
  gender        Gender         @default(NOT_SET)
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  banned_until  DateTime?
  deleted_at    DateTime?

  posts         Post[]         @relation("UserPosts")
  liked_post    PostLike[]     @relation("UserToPostLikes")
  disliked_post PostDislike[]  @relation("UserToPostDislikes")
  reposts       PostRepost[]   @relation("UserToPostReposts")
  saved_posts   PostSave[]     @relation("UserToPostSaves")

  following     User[]         @relation("UserFollows")
  followers     User[]         @relation("UserFollows")

  conversations ConversationParticipant[] @relation("UserConversations")
  sent_messages Message[]                 @relation("UserMessages")

  @@map("users")
}

model Post {
  id            Int            @id @default(autoincrement())
  content       String         @db.Text
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  deleted_at    DateTime?

  user_id       Int?
  ai_bot_id     Int?
  author        User?           @relation("UserPosts", fields: [user_id], references: [id])
  aiBot         AiBot?         @relation(fields: [ai_bot_id], references: [id])

  parent_id     Int?
  parent        Post?          @relation("PostReplies", fields: [parent_id], references: [id])
  replies       Post[]         @relation("PostReplies")
  postTags      PostHashtag[]
  media         PostMedia[]

  liked_by      PostLike[]     @relation("PostToUserLikes")
  disliked_by   PostDislike[]  @relation("PostToUserDislikes")
  reposted_by   PostRepost[]   @relation("PostToUserReposts")
  saved_by      PostSave[]     @relation("PostToUserSaves")

  @@map("posts")
}

model AiBot {
  id            Int      @id @default(autoincrement())
  name          String
  username      String   @unique
  profile_pict  String

  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  posts       Post[]

  @@map("ai_bots")
}

model PostMedia {
  id         Int         @id @default(autoincrement())
  post       Post        @relation(fields: [postId], references: [id])
  postId     Int
  source     MediaSource
  path       String
  created_at DateTime    @default(now())

  @@map("post_media")
}

model Hashtag {
  id         Int            @id @default(autoincrement())
  tag        String         @unique
  postTags   PostHashtag[] 
  created_at DateTime       @default(now())
}
model PostHashtag {
  postId    Int
  hashtagId Int

  post      Post    @relation(fields: [postId], references: [id])
  hashtag   Hashtag @relation(fields: [hashtagId], references: [id])
  created_at DateTime @default(now())

  @@id([postId, hashtagId]) 
}

model PostLike {
  post       Post     @relation("PostToUserLikes", fields: [postId], references: [id])
  postId     Int
  user       User     @relation("UserToPostLikes", fields: [userId], references: [id])
  userId     Int
  created_at DateTime @default(now())

  @@id([postId, userId])
}

model PostDislike {
  post       Post     @relation("PostToUserDislikes", fields: [postId], references: [id])
  postId     Int
  user       User     @relation("UserToPostDislikes", fields: [userId], references: [id])
  userId     Int
  created_at DateTime @default(now())

  @@id([postId, userId])
}

model PostRepost {
  post       Post     @relation("PostToUserReposts", fields: [postId], references: [id])
  postId     Int
  user       User     @relation("UserToPostReposts", fields: [userId], references: [id])
  userId     Int
  created_at DateTime @default(now())

  @@id([postId, userId])
}

model PostSave {
  post       Post     @relation("PostToUserSaves", fields: [postId], references: [id])
  postId     Int
  user       User     @relation("UserToPostSaves", fields: [userId], references: [id])
  userId     Int
  created_at DateTime @default(now())

  @@id([postId, userId])
}

model Conversation {
  id            Int             @id @default(autoincrement())
  is_group      Boolean         @default(false)
  created_at    DateTime        @default(now())
  updated_at    DateTime        @updatedAt

  participants  ConversationParticipant[]
  messages      Message[]

  @@map("conversations")
}

model ConversationParticipant {
  id              Int           @id @default(autoincrement())
  conversation    Conversation  @relation(fields: [conversationId], references: [id])
  conversationId  Int
  user            User          @relation("UserConversations", fields: [userId], references: [id])
  userId          Int
  joined_at       DateTime      @default(now())
  last_read_at    DateTime?

  @@unique([conversationId, userId])
  @@map("conversation_participants")
}

model Message {
  id              Int           @id @default(autoincrement())
  conversation    Conversation  @relation(fields: [conversationId], references: [id])
  conversationId  Int
  sender          User          @relation("UserMessages", fields: [senderId], references: [id])
  senderId        Int
  content         String        @db.Text
  created_at      DateTime      @default(now())
  updated_at      DateTime?     @updatedAt
  deleted_at      DateTime?

  @@map("messages")
}

enum MediaSource {
  USERCONTENT
  GIPHY
}

enum Gender {
  MALE
  FEMALE
  NOT_SET
}
